---
layout: notes
title: CS 170 Lecture 13
---

# Dynamic Programming

Dag/Equation

Time = #edge (n^2)
par-time = depth (n)

_Memory_


## Knapsack Problem.

    Item  Wt  Value
    1     6   $30
    2     3   $14
    3     4   $16
    4     2   $19
       W = 9

### With repetitions

    K[w] = the largest possible value for total weight w.

    K[w] = 0
    for i = wmin to w:
      K[w] = max(items i) [ K[w - wi] + vi ] 


              /-------\
            /-------\ |
          /-------\ | |
        /-------\ | | |
      /-------\ /-----\
    /-------\ /-----\ |
    | | | | /-----\ | |
    | | | /-----\ /---\
    | | /-----\ /---\ |
    | /-----\ /---\ | |
    /-----\ /---\ | | |
    | | | /---\ | | | |
    | | /---\ | | | | |
    | /---\ | | | | | |
    /---\ | | | | | | |
    0 1 2 3 4 5 6 7 8 9

### Without Repetitions

    K(w, i) = the highest value I can pack in a knapsack of wt w when the
              available items are 1 .. i

    K(0, i) = K(w, 0) = 0
    for i = 1 to n:
      for w = 1 to w:
        if w > n K(w, i) = K(w, i-1)
        else: K(w, i) = max[K(w, i-1), K(w-wi, i-1)] + vi

# Pay Attention!!!

\\( \int_{hex}^boo )\\
